// Problem #2: Even fibonacci numbers
// https://projecteuler.net/problem=2
//
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
//       1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.

pub mod solutions {
    const LIMIT: i64 = 4000000;

    struct Fibonacci {
        curr: i64,
        next: i64,
    }

    impl Fibonacci {
        fn new() -> Fibonacci {
            Fibonacci { curr: 0, next: 1 }
        }
    }

    impl Iterator for Fibonacci {
        type Item = i64;

        fn next(&mut self) -> Option<Self::Item> {
            let curr = self.curr;

            self.curr = self.next;
            self.next = self.next + curr;

            Some(curr)
        }
    }

    pub fn simple() -> i64 {
        let mut sum: i64 = 0;

        let mut fib = Fibonacci::new();

        while let Some(f) = fib.next() {
            if f >= LIMIT {
                break;
            }

            if f % 2 == 0 {
                sum = sum + f;
            }
        }

        return sum;
    }

    pub fn using_take_while() -> i64 {
        let mut sum: i64 = 0;

        let fib = Fibonacci::new();

        for f in fib.take_while(|f| f < &LIMIT) {
            if f % 2 == 0 {
                sum = sum + f;
            }
        }

        return sum;
    }

    pub fn using_iterators() -> i64 {
        Fibonacci::new()
            .take_while(|f| f < &LIMIT)
            .filter(|f| f % 2 == 0)
            .sum()
    }

}
